// -*- Go -*-
/* ------------------------------------------------ */
/* Golang source                                    */
/* Author: Alexei Panov <me@elemc.name> 			*/
/* ------------------------------------------------ */

package main

import (
	"fmt"
	"math/rand"
	"os/exec"
	"strings"

	log "github.com/Sirupsen/logrus"
	"gopkg.in/telegram-bot-api.v4"
)

func commandsMainHandler(msg *tgbotapi.Message) {
	cmd := msg.Command()
	args := msg.CommandArguments()
	log.Debugf("Command from %s: `%s %s`", msg.From.String(), cmd, args)
	switch strings.ToLower(cmd) {
	case "start":
		go commandsStartHandler(msg)
	case "ban", "unban":
		go commandsBanHandler(msg)
	case "dnf", "yum":
		go commandsDNFHandler(msg)
	case "flood":
		go commandsFloodHandler(msg)
	case "ping":
		go commandsPingHandler(msg)
	case "help":
		go commandsHelpHandler(msg)
	case "pid":
		go commandsPIDHandler(msg)
	case "link":
		go commandsLinkHandler(msg)
	default:

	}
}

func commandsStartHandler(msg *tgbotapi.Message) {
	t := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç %s!", msg.From.String())
	sendMessage(msg.Chat.ID, t, msg.MessageID)
	log.Debugf("Say hello to %s", msg.From.String())
}

func commandsHelpHandler(msg *tgbotapi.Message) {
	helpMsg :=
		`–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞.
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª—è –ª—é–±–æ–≥–æ –±–æ—Ç–∞ Telegram)
/help - –¥–∞–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/ban @username - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ)
/unban @username - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ)
/ping - —à—É—Ç–æ—á–Ω—ã–π –ø–∏–Ω–≥
/yum [info provides repolist repoquery] - –∞–Ω–∞–ª–æ–≥ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
/dnf [info provides repolist repoquery] - –∞–Ω–∞–ª–æ–≥ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
`
	sendMessage(msg.Chat.ID, helpMsg, 0)
}

func commandsLinkHandler(msg *tgbotapi.Message) {
	if msg.ReplyToMessage == nil {
		sendMessage(msg.Chat.ID, "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.", msg.MessageID)
		return
	}
	if len(msg.Chat.UserName) == 0 {
		sendMessage(msg.Chat.ID, fmt.Sprintf("–≠—Ç–æ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç, —Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. Message ID = *%d*", msg.ReplyToMessage.MessageID), msg.MessageID)
		return
	}

	sendMessage(msg.Chat.ID, fmt.Sprintf("https://t.me/%s/%d", msg.Chat.UserName, msg.ReplyToMessage.MessageID), msg.MessageID)
}

func commandsPIDHandler(msg *tgbotapi.Message) {
	if msg.ReplyToMessage == nil {
		sendMessage(msg.Chat.ID, "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.", msg.MessageID)
		return
	}

	sendMessage(msg.Chat.ID, fmt.Sprintf("``` %d ```", msg.ReplyToMessage.MessageID), msg.MessageID)
}

func commandsPingHandler(msg *tgbotapi.Message) {
	r := rand.New(rand.NewSource(int64(msg.From.ID)))
	r.Seed(int64(msg.MessageID))

	if r.Int()%12 == 0 {
		sendMessage(msg.Chat.ID, "Request timed out üòú", msg.MessageID)
		return
	}
	pingMsg := fmt.Sprintf("%s –ø–∏–Ω–≥ –æ—Ç —Ç–µ–±—è %3.3f üòú", msg.From.String(), r.Float32())
	sendMessage(msg.Chat.ID, pingMsg, msg.MessageID)
}

func commandsFloodHandler(msg *tgbotapi.Message) {
	if !isMeAdmin(msg.Chat) {
		sendMessage(msg.Chat.ID, "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", msg.MessageID)
		log.Warn("Command `flood` in chat with bot not admin from %s", msg.From.String())
		return
	}

	if msg.ReplyToMessage == nil {
		sendMessage(msg.Chat.ID, "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ñ–ª—É–¥, —Ç–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.", msg.MessageID)
		return
	}

	if botUser, err := bot.GetMe(); err != nil {
		log.Errorf("Unable to get bot user: %s", err)
		return
	} else if botUser.ID == msg.ReplyToMessage.From.ID {
		sendMessage(msg.Chat.ID, fmt.Sprintf("–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞ %s üòú", msg.From.String()), msg.MessageID)
		return
	}

	// chech himself
	if msg.ReplyToMessage.From.ID == msg.From.ID {
		sendMessage(msg.Chat.ID, "–°–∞–º–æ—Ç—ã–∫? üòú", msg.MessageID)
		return
	}

	// check flood duration
	if exists, d, err := cacheGet(msg.ReplyToMessage.From.ID, msg.From.ID); err != nil {
		log.Errorf("Unable to get cache: %s")
		return
	} else if exists {
		sendMessage(msg.Chat.ID, fmt.Sprintf("–¢—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –æ–±—ä—è–≤–ª—è–ª %s —Ñ–ª—É–¥–µ—Ä–æ–º. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è: %s", msg.ReplyToMessage.From.String(), (options.CacheDuration-d).String()), msg.MessageID)
		return
	} else {
		if err = cacheSet(msg.ReplyToMessage.From.ID, msg.From.ID); err != nil {
			log.Errorf("Unable to set cache for flooder ID %d and user ID %d: %s", msg.ReplyToMessage.From.ID, msg.From.ID, err)
		}
	}

	var (
		level   int
		err     error
		apiResp tgbotapi.APIResponse
	)

	if level, err = dbAddFloodLevel(msg.ReplyToMessage.From.ID); err != nil {
		log.Errorf("Unable to add flood level for %d: %s", msg.ReplyToMessage.From.ID, err)
		return
	}
	if level >= options.MaximumFloodLevel {
		config := tgbotapi.ChatMemberConfig{
			ChatID:             msg.Chat.ID,
			SuperGroupUsername: msg.Chat.UserName,
			UserID:             msg.ReplyToMessage.From.ID,
		}
		if apiResp, err = bot.KickChatMember(config); err != nil {
			if apiResp.Ok {
				sendMessage(msg.Chat.ID, fmt.Sprintf("%s —Ç–µ—Ä–ø–µ–Ω–∏–µ —Ç—É–∑–µ–º—Ü–µ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –ø–æ –ø–æ–≤–æ–¥—É —Ç–≤–æ–µ–≥–æ —Ñ–ª—É–¥–∞ –∫–æ–Ω—á–∏–ª–æ—Å—å. –ú—ã –∏–∑–≥–æ–Ω—è–µ–º —Ç–µ–±—è!", msg.ReplyToMessage.From.String()), 0)
			} else {
				log.Warnf("Unable to ban flooder %s. API response with error: (%d) %s", msg.ReplyToMessage.From.String(), apiResp.ErrorCode, apiResp.Description)
			}
		}

		if err = dbSetFloodLevel(msg.ReplyToMessage.From.ID, 0); err != nil {
			log.Errorf("Unable to clear flood level for banned user: %s", err)
		}
	} else {
		sendMessage(msg.Chat.ID, fmt.Sprintf("%s —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ñ–ª—É–¥–µ—Ä–æ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ %d –∏ –±—É–¥–µ—à—å –∏–∑–≥–Ω–∞–Ω!", msg.ReplyToMessage.From.String(), options.MaximumFloodLevel-level), msg.ReplyToMessage.MessageID)
	}
}

func commandsBanHandler(msg *tgbotapi.Message) {
	if !msg.Chat.IsGroup() && !msg.Chat.IsSuperGroup() {
		sendMessage(msg.Chat.ID, "–ö–æ–≥–æ –±—É–¥–µ–º –±–∞–Ω–∏—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–µ? üòÇ", msg.MessageID)
		log.Debugf("Commands `ban` or `unban` in private chat from %s", msg.From.String())
		return
	}

	if !isMeAdmin(msg.Chat) {
		sendMessage(msg.Chat.ID, "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", msg.MessageID)
		log.Warn("Commands `ban` or `unban` in chat with bot not admin from %s", msg.From.String())
		return
	} else {
		log.Debugf("Commands `ban` or `unban` in group or supergroup chat with bot admin from %s", msg.From.String())
	}

	if !isUserAdmin(msg.Chat, msg.From) {
		sendMessage(msg.Chat.ID, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –ù–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ –±–∞–Ω—ã/—Ä–∞–∑–±–∞–Ω—ã! ü§î\n–ü–æ–ø—ã—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ë–ê–ù–µ–Ω–∏—è —É–∂–µ –≤—ã–µ—Ö–∞–ª–∞ –∑–∞ —Ç–æ–±–æ–π!üòâ", msg.MessageID)
		log.Warnf("Commands `ban` or `unban` run fails, user %s not admin in chat!", msg.From.String())
		return
	}

	if msg.CommandArguments() == "" {
		sendMessage(msg.Chat.ID, "–ö–æ–≥–æ –±—É–¥–µ–º –±–∞–Ω–∏—Ç—å?", msg.MessageID)
		log.Debugf("Command `ban` without arguments from %s", msg.From.String())
		return
	}

	username := msg.CommandArguments()
	var (
		user    *tgbotapi.User
		err     error
		apiResp tgbotapi.APIResponse
	)
	if user, err = getUser(username); err != nil {
		if err == ErrorUserNotFound {
			sendMessage(msg.Chat.ID, fmt.Sprintf("–ù–µ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", username), msg.MessageID)
			return
		} else if strings.Contains(err.Error(), "–°–ø–∏—Å–æ–∫:") {
			sendMessage(msg.Chat.ID, fmt.Sprintf("–ë–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–∞–ª–æ –≤ –≤—ã–±–æ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å @username. \n%s", err), msg.MessageID)
			return
		}
		log.Errorf("Unable to find user with name [%s]: %s", username, err)
		return
	}
	log.Debugf("Found user [%+v]", *user)

	config := tgbotapi.ChatMemberConfig{
		ChatID:             msg.Chat.ID,
		SuperGroupUsername: msg.Chat.UserName,
		UserID:             user.ID,
	}

	if strings.ToLower(msg.Command()) == "ban" {
		apiResp, err = bot.KickChatMember(config)
	} else if strings.ToLower(msg.Command()) == "unban" {
		apiResp, err = bot.UnbanChatMember(config)
	}

	if err != nil {
		if apiResp.Ok || apiResp.ErrorCode == 0 {
			sendMessage(msg.Chat.ID, "–°–¥–µ–ª–∞–Ω–æ", msg.MessageID)
			log.Debugf("Ban/Unban %s successful", user.String())
		} else {
			sendMessage(msg.Chat.ID, fmt.Sprintf("*–û—à–∏–±–∫–∞*: ``` –∫–æ–¥=%d, –æ–ø–∏—Å–∞–Ω–∏–µ=%s ```", apiResp.ErrorCode, apiResp.Description), msg.MessageID)
			log.Warnf("API response with error: (%d) %s", apiResp.ErrorCode, apiResp.Description)
		}
	}
}

func commandsDNFHandler(msg *tgbotapi.Message) {
	var (
		err    error
		output []byte
	)
	args := strings.Replace(msg.CommandArguments(), "‚Äî", "--", -1)
	if args == "" {
		sendMessage(msg.Chat.ID, "–ù–µ –∑–Ω–∞—é, —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å, —Ç—ã –∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–ª –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö", msg.MessageID)
		log.Debugf("Command `dnf` without arguments from %s", msg.From.String())
		return
	}

	arglist := strings.Split(args, " ")
	if arglist[0] == "info" || arglist[0] == "provides" || arglist[0] == "repolist" || arglist[0] == "repoquery" {
		if arglist[0] != "repolist" && arglist[0] != "repoquery" {
			arglist = append(arglist, "-q")
		}
		cmd := exec.Command("/usr/bin/dnf", arglist...)
		/*var (
			stdout io.ReadCloser
			stderr io.ReadCloser
		)
		if stdout, err = cmd.StdoutPipe(); err != nil {
			log.Errorf("Unable to get stdout pipe: %s", err)
			return
		}
		if stderr, err = cmd.StderrPipe(); err != nil {
			log.Errorf("Unable to get stderr pipe: %s", err)
			return
		}

		if err = cmd.Start(); err != nil {
			log.Errorf("Unable to start command [dnf %s]: %s", strings.Join(arglist, " "), err)
			return
		}

		var buf []byte
		if _, err = stdout.Read(buf); err != nil {
			log.Errorf("Unable to read stdout for command [dnf %s]: %s", strings.Join(arglist, " "), err)
			return
		}
		if len(buf) > 0 {
			output = append(output, buf...)
		}
		if _, err = stderr.Read(buf); err != nil {
			log.Errorf("Unable to read stderr for command [dnf %s]: %s", strings.Join(arglist, " "), err)
			return
		}
		if len(buf) > 0 {
			output = append(output, buf...)
		}

		if err = cmd.Wait(); err != nil {
			log.Errorf("Unable to wait command [dnf %s]: %s", strings.Join(arglist, " "), err)
			return
		}

		if len(output) > 0 {
			sendMessage(msg.Chat.ID, fmt.Sprintf("``` %s ```", output), msg.MessageID)
			log.Debugf("Run command from %s: dnf %s", msg.From.String(), strings.Join(arglist, " "))
		} else {
			sendMessage(msg.Chat.ID, "–ê –Ω–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å, –≤—ã–≤–æ–¥ –ø—É—Å—Ç–æ–π", msg.MessageID)
			log.Warnf("Run command from %s: dnf %s with empty output", msg.From.String(), strings.Join(arglist, " "))
		}*/

		if output, err = cmd.CombinedOutput(); err != nil {
			log.Errorf("Unable to run command form %s: dnf %s: %s", msg.From.String(), strings.Join(arglist, " "), strings.Join(arglist, " "))
			sendMessage(msg.Chat.ID, "–û–π. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", msg.MessageID)
		} else if len(output) == 0 {
			sendMessage(msg.Chat.ID, "–ê –Ω–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å, –≤—ã–≤–æ–¥ –ø—É—Å—Ç–æ–π", msg.MessageID)
			log.Warnf("Run command from %s: dnf %s with empty output", msg.From.String(), strings.Join(arglist, " "))
		} else {
			sendMessage(msg.Chat.ID, fmt.Sprintf("``` %s ```", output), msg.MessageID)
			log.Debugf("Run command from %s: dnf %s", msg.From.String(), strings.Join(arglist, " "))
		}
	}
}
